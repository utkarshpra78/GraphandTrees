//https://leetcode.com/problems/surrounded-regions/

class Solution {
public:
    void dfs(vector<vector<int>>&vis,vector<vector<char>>& board,int n,int m,int i,int j){
        vis[i][j]=1;
        int delrow[]={1,-1,0,0};
	    int delcol[]={0,0,1,-1};
	    for(int k=0;k<4;k++){
	        int nr=i+delrow[k];
	        int nc=j+delcol[k];
	        if(nr>=0 && nr<n && nc>=0 && nc<m && !vis[nr][nc] && board[nr][nc]=='O'){
	            dfs(vis,board,n,m,nr,nc);
	        }
	    }

    }
    void solve(vector<vector<char>>& board) {
        int n=board.size();
        int m=board[0].size();
        vector<vector<int>>vis(n,vector<int>(m,0));
        vector<vector<int>>ans(n,vector<int>(m,0));

        for(int i=0;i<m;i++){
            if(!vis[0][i] && board[0][i]=='O'){
                dfs(vis,board,n,m,0,i);
            }
        }
        for(int i=0;i<m;i++){
            if(!vis[n-1][i] && board[n-1][i]=='O'){
                dfs(vis,board,n,m,n-1,i);
            }
        }
        for(int i=0;i<n;i++){
            if(!vis[i][0] && board[i][0]=='O'){
                dfs(vis,board,n,m,i,0);
            }
        }
        for(int i=0;i<n;i++){
            if(!vis[i][m-1] && board[i][m-1]=='O'){
                dfs(vis,board,n,m,i,m-1);
            }
        }

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(board[i][j]=='O' && !vis[i][j]){
                    board[i][j]='X';
                }
            }
        }

    }
};
